#!/usr/bin/env ruby
# encoding: utf-8

require 'active_support/core_ext'
require 'fog'
require 'thor'
require 'yaml'

class RDS < Thor
  desc 'add SECURITY_GROUP', 'Add a RDS security group'
  method_options region: :string
  def add(group)
    authenticated?
    
    region = options.region || 'eu-west-1'
    
    print 'Testing...'
    begin
      Fog::AWS::RDS.new(config.slice(:aws_access_key_id, :aws_secret_access_key).merge(region: region)).describe_db_security_groups(group)
      puts 'OK'
    rescue
      puts 'NO'
      exit
    end
    
    config[:groups] ||= {}
    config[:groups][group] = { group: group, region: region }
    save!
  end


  desc 'authenticate AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY', 'Authenticate on Amazon RDS'
  def authenticate(aws_access_key_id, aws_secret_access_key)
    @config = { aws_access_key_id: aws_access_key_id, aws_secret_access_key: aws_secret_access_key }
    save!
  end


  desc 'authorize', 'Authorize current public IP'
  default_task 'authorize'
  def authorize
    authenticated?
    
    last_ip = config[:last_ip] + '/32'
    current_ip = Fog::CurrentMachine.ip_address + '/32'
    
    
    config[:groups].each do |_, group|
      rds = Fog::AWS::RDS.new(config.slice(:aws_access_key_id, :aws_secret_access_key).merge(region: group[:region]))
      
      ip_ranges = rds.describe_db_security_groups(group[:group]).body['DescribeDBSecurityGroupsResult']['DBSecurityGroups'][0]['IPRanges'].map(&:values).map(&:first)
      
      rds.revoke_db_security_group_ingress(group[:group], 'CIDRIP' => last_ip) if ip_ranges.include?(last_ip)
      rds.authorize_db_security_group_ingress(group[:group], 'CIDRIP' => current_ip) unless ip_ranges.include?(current_ip)
    end
    
    config[:last_ip] = Fog::CurrentMachine.ip_address
    save!
  end

private
  def file
    File.join(File.dirname(__FILE__), 'rds.yml')
  end

  def config
    @config ||= YAML.load(File.open(file, 'r'))
  end

  def save!
    YAML.dump(@config, File.open(file, 'w'))
  end

  def authenticated?
    unless [:aws_access_key_id, :aws_secret_access_key].all? { |k| config.keys.include?(k) }
      puts 'Please authenticate first with `rds authenticate`!' 
      exit
    end
  end
end


RDS.start